{"version":3,"sources":["Form.js","Table.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","setState","defineProperty","onFormSubmit","preventDefault","handleSubmit","state","initialState","job","_this$state","react_default","a","createElement","onSubmit","type","onChange","Component","TableHeader","TableBody","rows","characterData","map","row","index","key","onClick","removeCharacter","Table","_this$props","Table_TableHeader","Table_TableBody","App","characters","filter","character","i","concat","toConsumableArray","className","src","logo","alt","src_Table","src_Form","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.afa14917.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.initialState = {\r\n      name: '',\r\n      job: '',\r\n    };\r\n\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n      \r\n      this.props.handleSubmit(this.state);\r\n      this.setState(this.initialState);\r\n  }\r\n\r\n  render() {\r\n    const { name, job } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.onFormSubmit}>\r\n        <label>Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={this.handleChange} />\r\n        <label>Job</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"job\"\r\n          value={job}\r\n          onChange={this.handleChange} />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form","import React, { Component } from 'react'\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n        <th>Action</th>\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nconst TableBody = props => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n        <td>\r\n        <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return <tbody>{rows}</tbody>\r\n}\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    const { characterData, removeCharacter } = this.props\r\n\r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport Form from './Form'\nimport Table from './Table'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    characters: [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'Mac',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      },\n    ],\n  }\n\n  removeCharacter = index => {\n    const { characters } = this.state\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      }),\n    })\n  }\n\n  handleSubmit = character => {\n    this.setState({ characters: [...this.state.characters, character] })\n  }\n\n  render() {\n    const { characters } = this.state\n\n    return (\n      <div className=\"full-container\">\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </header>\n        </div>\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter} />\n        <Form\n          handleSubmit={this.handleSubmit} />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}